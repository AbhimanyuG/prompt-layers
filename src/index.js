import React, { useState } from "react";
import { createRoot } from "react-dom/client";
import { Button, Space, version, Input, message, Row, Col } from "antd";
import { PlusOutlined, DeleteOutlined } from "@ant-design/icons";
import "antd/dist/reset.css";
import "./index.css";

const { TextArea } = Input;

const App = () => {
  const [prompts, setPrompts] = useState([{ id: 0, value: "" }]);
  const [logs, setLogs] = useState([]);

  const addPrompt = () => {
    setPrompts([...prompts, { id: prompts.length, value: "" }]);
  };

  const deletePrompt = (id) => {
    setPrompts(prompts.filter((prompt) => prompt.id !== id));
  };

  const handleChange = (e, id) => {
    setPrompts(
      prompts.map((prompt) =>
        prompt.id === id ? { ...prompt, value: e.target.value } : prompt
      )
    );
  };

  const validate = () => {
    for (let i = 1; i < prompts.length; i++) {
      if (!prompts[i].value.includes("[last_output]")) {
        message.error(
          `You need to utilize output generated by previous prompt to use this layer: ${prompts[i].id}`
        );
        return false;
      }
    }
    return true;
  };

  const processPrompt = async (index, prompt, last_output = false) => {
    // Replace with your external function call
    return new Promise((resolve) =>
      setTimeout(
        () => resolve(`Processed Prompt ${index}: ${prompt.value}`),
        1000
      )
    );
  };

  const main = async () => {
    if (validate()) {
      let last_output = false;
      setLogs([]);
      for (let i = 0; i < prompts.length; i++) {
        last_output = await processPrompt(i, prompts[i], last_output);
        setLogs((logs) => [...logs, last_output]);
      }
      setLogs((logs) => [...logs, `Final result: ${last_output}`]);
    }
  };

  return (
    <div className="App">
      <h1>Prompt Layers by Zapdroid.io</h1>
      <Row>
        <Col span={18}>
          <Space direction="vertical" style={{ width: "100%" }}>
            {prompts.map((prompt) => (
              <div key={prompt.id}>
                <TextArea
                  id={`prompt-${prompt.id}`}
                  placeholder={
                    prompt.id === 0
                      ? "Enter first prompt"
                      : `Prompt ${prompt.id} layer text, must use template variable [last_output] to utilize output of previous prompt`
                  }
                  autoSize={{ minRows: 3, maxRows: 5 }}
                  value={prompt.value}
                  onChange={(e) => handleChange(e, prompt.id)}
                />
                <Button
                  icon={<DeleteOutlined />}
                  onClick={() => deletePrompt(prompt.id)}
                >
                  Delete
                </Button>
              </div>
            ))}
            <Button icon={<PlusOutlined />} type="primary" onClick={addPrompt}>
              Add
            </Button>
            <Button type="primary" onClick={main}>
              Run
            </Button>
          </Space>
        </Col>
        <Col span={5} style={{ marginLeft: 5 }}>
          <h2>Logs:</h2>
          {logs.map((log, index) => (
            <p key={index}>{log}</p>
          ))}
        </Col>
      </Row>
    </div>
  );
};

const root = createRoot(document.getElementById("root"));
root.render(<App />);
